#!/usr/bin/env python2
#
# Example to compare the faces in two images.
# Brandon Amos
# 2015/09/29
#
# Copyright 2015-2016 Carnegie Mellon University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time

start = time.time()

import argparse
import cv2
import itertools
import os
from os import walk

import numpy as np
np.set_printoptions(precision=2)

import openface

import rectangle

import dlib

print("startttt")
count = 0

fileDir = os.path.dirname(os.path.realpath(__file__))
modelDir = os.path.join(fileDir, '..', 'models')
dlibModelDir = os.path.join(modelDir, 'dlib')
openfaceModelDir = os.path.join(modelDir, 'openface')

print(fileDir)
print(modelDir)
print(dlibModelDir)
print(openfaceModelDir)

parser = argparse.ArgumentParser()

parser.add_argument('--imgs', type=str, nargs='+', help="Input images.")
parser.add_argument('--dlibFacePredictor', type=str, help="Path to dlib's face predictor.",
                    default=os.path.join(dlibModelDir, "shape_predictor_68_face_landmarks.dat"))
parser.add_argument('--networkModel', type=str, help="Path to Torch network model.",
                    default=os.path.join(openfaceModelDir, 'nn4.small2.v1.t7'))
parser.add_argument('--imgDim', type=int,
                    help="Default image dimension.", default=224)
parser.add_argument('--verbose', action='store_true')

args = parser.parse_args()
print("args : ", args)

if args.verbose:
    print("Argument parsing and loading libraries took {} seconds.".format(
        time.time() - start))

start = time.time()
align = openface.AlignDlib(args.dlibFacePredictor)

net = openface.TorchNeuralNet(args.networkModel, args.imgDim)
if args.verbose:
    print("Loading the dlib and OpenFace models took {} seconds.".format(
        time.time() - start))

def getRep(imgPath, fileName):

    if args.verbose:
        print("Processing {}.".format(imgPath))
    bgrImg = cv2.imread(imgPath)
    print ("imPath : ", imgPath)

    if bgrImg is None:
        raise Exception("Unable to load image: {}".format(imgPath))
    rgbImg = cv2.cvtColor(bgrImg, cv2.COLOR_BGR2RGB)

    sharpImgPath = "/home/galip/Desktop/Thesis/data/" + fileName + ".jpg"
    sharpBgrImg = cv2.imread(sharpImgPath)

    if sharpBgrImg is None:
        raise Exception("Unable to load image: {}".format(imgPath))
    sharpRgbImg = cv2.cvtColor(sharpBgrImg, cv2.COLOR_BGR2RGB)

    if args.verbose:
        print("  + Original size: {}".format(rgbImg.shape))

    start = time.time()

    bb = align.getLargestFaceBoundingBox(sharpRgbImg)

    #get facial landmark, save.
    #print("bb : ", bb)
    #name = '/home/galip/Desktop/VGG/sharpdata/landmark/' + fileName + '.txt'
    #file = open(name, 'a')
    #file.writelines(str(bb))
    #file.close()

    if bb is None:
        raise Exception("Unable to find a face: {}".format(imgPath))
    if args.verbose:
        print("  + Face detection took {} seconds.".format(time.time() - start))

    start = time.time()
    #alignedFace = align.align(args.imgDim, rgbImg, bb,
    #                          landmarkIndices=openface.AlignDlib.OUTER_EYES_AND_NOSE)

    alignedFace = align.alignDistortedImage(args.imgDim, rgbImg, sharpRgbImg, bb,
                              landmarkIndices=openface.AlignDlib.OUTER_EYES_AND_NOSE)

    if alignedFace is None:
        raise Exception("Unable to align image: {}".format(imgPath))
    if args.verbose:
        print("  + Face alignment took {} seconds.".format(time.time() - start))

    # get alignedFace, save.
    name = '/home/galip/Desktop/VGG/Saltpepper/saltpeppersource05/alignedface05/' + fileName + '.png'
    #name = '/home/galip/Desktop/Thesis/alignedface/' + fileName + '.png'
    cv2.imwrite(name, cv2.cvtColor(alignedFace, cv2.COLOR_BGR2RGB))



for dirpath, dirnames, filenames in walk("/home/galip/Desktop/VGG/Saltpepper/saltpeppersource05/saltpepper05/"):
#for dirpath, dirnames, filenames in walk("/home/galip/Desktop/Thesis/data/"):
    print(filenames)
    print(dirpath)

    for f in filenames:
     d =  getRep(dirpath + f, f.partition(".")[0])
     print(f.partition(".")[0])
     count += 1
     print(count)
